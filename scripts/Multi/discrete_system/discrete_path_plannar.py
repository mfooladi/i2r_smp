import osimport subprocessimport os.pathparent_dir = os.path.dirname(__file__)+'/../'print 'parent_dir', parent_dir# geometry_name='Cdef planner(geometry_name, init_triangle, goals_file):    os.system('triangle -Bnevgu {}.poly'.format(parent_dir+'geometry/'+geometry_name))# -n is for producing the neighbor    # os.system('showme {}.1.ele'.format(parent_dir+'geometry/'+geometry_name))        if os.path.isfile('output_file.smv'): #remove previous output file        os.remove('output_file.smv')        with open(parent_dir+'geometry/{}.1.neigh'.format(geometry_name)) as f: #opens input file (C.1.neigh)        lines = f.readlines()    f.close()        del lines[-1]    state_number = len(lines)-1    with open(parent_dir+'discrete_transition/{}.txt'.format(goals_file), 'r') as g:        goals = g.readlines()    g.close()        state_number = len(lines)    text_file = open(parent_dir+'discrete_transition/output_file.smv', 'w')    text_file.write('MODULE main\nVAR\nx : grid;\n')    text_file.write('LTLSPEC !( (')    text_file.write(' &'.join(' F (x.state = '+ gg.strip() + ')' for gg in goals) + ' ) )')    text_file.write('\nMODULE grid\nVAR\nstate : 1..')    text_file.write(state_number.__str__())    text_file.write(';\nASSIGN\ninit(state) := {};\nnext(state) := \ncase\n'.format(init_triangle))    for i in xrange(1, state_number):        pp = lines[i].strip().split(' ')        pp = filter(None, pp)        pp = pp[1:]            try:            pp.remove('-1')        except ValueError:            None            try:            pp.remove('-1')        except ValueError:            None            text_file.write('state = %d : {'%i +', '.join(p for p in pp)+'};\n')        text_file.write('TRUE : state ;\nesac;')    text_file.close()    ###### Runs NuSMV and outputs the file state_order ######    output = subprocess.check_output('NuSMV ' + parent_dir+'discrete_transition/output_file.smv', shell= True ) #run NuSMV    text_file = open(parent_dir+'discrete_transition/smv_output.txt', 'w')    text_file.write(output)    text_file.close()        with open(parent_dir+'discrete_transition/smv_output.txt', 'r') as path:        paths = path.readlines()        del paths[0:19]        state2 = []        for search in paths:        if "x.state" in search:            search = ''.join(search)            letters = list(search)            pos_equal_sign = letters.index('=')            state1 = ''.join(letters[pos_equal_sign+2:len(letters)-1])            state2.append(state1)        elif "Loop" in search:            break        text_file2 = open(parent_dir + 'discrete_transition/state_order_{}.txt'.format(geometry_name), 'w')    text_file2.write('\n'.join(state2))    text_file2.close()        return