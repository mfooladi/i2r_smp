      #include <iostream>
    #include <string>
     
    // roscpp
    #include <ros/ros.h>
    #include <tf/transform_broadcaster.h>
    #include <sensor_msgs/LaserScan.h>
    #include <nav_msgs/Odometry.h>
    #include <geometry_msgs/Twist.h>
     
    // libstage
    #include <libplayerc++/playerc++.h>
     
    #include <assert.h>
     
     
     
    class PlayerRosNode {
      public:
        PlayerRosNode(std::string host);
             
     
      private:
        //  Player objects
        PlayerCc::PlayerClient *client;
        PlayerCc::Position2dProxy *posProx;
        PlayerCc::LaserProxy *lasProx;
        pthread_mutex_t mutex;

        // ROS topics
        ros::NodeHandle n;
        ros::Publisher laser_pub;
        ros::Publisher odom_pub;
        ros::Subscriber vel_sub;
        tf::TransformBroadcaster tfb;
     
        void odomReceived(void);
        void laserReceived(void);
        void cmdvelReceived(const boost::shared_ptr<geometry_msgs::Twist const>& msg);
    };
     
     
    /// Connects to Player on the specified host and create the bridge between
    /// Player and ROS.
    PlayerRosNode::PlayerRosNode(std::string host)
    {

      // Connect to player and get the proxies for position and laser
      std::cout << "host is : " << host;
      try {
        client = new PlayerCc::PlayerClient(host);
        posProx = new PlayerCc::Position2dProxy(client);
        posProx->SetMotorEnable(true);
        lasProx = new PlayerCc::LaserProxy(client);
      }
      catch( PlayerCc::PlayerError e) {
        std::cerr << e << std::endl;
        abort();
      }
     
      // A mutex to protect concurrent access to posProx, because it is accessed in
      // 2 different threads (odomReceived and cmdvelReceived)
      pthread_mutex_init(&mutex,NULL);
     
      // Connect the handlers to treat player updates
      posProx->ConnectReadSignal(boost::bind(&PlayerRosNode::odomReceived,this));
      lasProx->ConnectReadSignal(boost::bind(&PlayerRosNode::laserReceived,this));
     
      // Advertize the ROS topics for odometry and laser data
      if(host.compare("192.168.1.12")==0)
      {
      odom_pub = n.advertise<nav_msgs::Odometry>("/HKA/odom", 10);
      laser_pub = n.advertise<sensor_msgs::LaserScan>("/HKA/base_scan", 10);
     
      // Subscribe to the topic to receive velocity commands
      vel_sub = n.subscribe<geometry_msgs::Twist>("/HKA/cmd_velGA", 10,
                            boost::bind(&PlayerRosNode::cmdvelReceived,this,_1));
      }
      

      if(host.compare("192.168.1.11")==0) 
      {
      odom_pub = n.advertise<nav_msgs::Odometry>("/HKB/odom", 10);
      laser_pub = n.advertise<sensor_msgs::LaserScan>("/HKB/base_scan", 10);
     
      // Subscribe to the topic to receive velocity commands
      vel_sub = n.subscribe<geometry_msgs::Twist>("/HKB/cmd_velGA", 10,
                            boost::bind(&PlayerRosNode::cmdvelReceived,this,_1));
      }

      if(host.compare("192.168.1.10")==0) 
      {
      odom_pub = n.advertise<nav_msgs::Odometry>("/HKC/odom", 10);
      laser_pub = n.advertise<sensor_msgs::LaserScan>("/HKC/base_scan", 10);
     
      // Subscribe to the topic to receive velocity commands
      vel_sub = n.subscribe<geometry_msgs::Twist>("/HKC/cmd_velGA", 10,
                            boost::bind(&PlayerRosNode::cmdvelReceived,this,_1));
      }

      if(host.compare("192.168.1.13")==0) 
      {
      odom_pub = n.advertise<nav_msgs::Odometry>("/HKD/odom", 10);
      laser_pub = n.advertise<sensor_msgs::LaserScan>("/HKD/base_scan", 10);
     
      // Subscribe to the topic to receive velocity commands
      vel_sub = n.subscribe<geometry_msgs::Twist>("/HKD/cmd_velGA", 10,
                            boost::bind(&PlayerRosNode::cmdvelReceived,this,_1));
      }

      if(host.compare("192.168.1.14")==0) 
      {
      odom_pub = n.advertise<nav_msgs::Odometry>("/HKE/odom", 10);
      laser_pub = n.advertise<sensor_msgs::LaserScan>("/HKC/base_scan", 10);
     
      // Subscribe to the topic to receive velocity commands
      vel_sub = n.subscribe<geometry_msgs::Twist>("/HKE/cmd_velGA", 10,
                            boost::bind(&PlayerRosNode::cmdvelReceived,this,_1));
      }
     
      if(host.compare("192.168.1.15")==0) 
      {
      odom_pub = n.advertise<nav_msgs::Odometry>("/HKF/odom", 10);
      laser_pub = n.advertise<sensor_msgs::LaserScan>("/HKF/base_scan", 10);
     
      // Subscribe to the topic to receive velocity commands
      vel_sub = n.subscribe<geometry_msgs::Twist>("/HKF/cmd_velGA", 10,
                            boost::bind(&PlayerRosNode::cmdvelReceived,this,_1));
      }     

      // Start the player client
      client->StartThread();
    }
     
     
    /// A callback function called by player when an odometry packet is received.
    /// Read the packet and create the corresponding ROS message, then publish it.
    void PlayerRosNode::odomReceived() {
      // safety net
      assert(posProx);
     
      // lock access to posProx
      pthread_mutex_lock( &mutex );
     
      // Retrieve odo info from Player
      float x = posProx->GetXPos();
      float y = posProx->GetYPos();
      float th = posProx->GetYaw(); //theta
      float vx = posProx->GetXSpeed();
      float vth = posProx->GetYawSpeed();
     
      // release access to posProx
      pthread_mutex_unlock( &mutex );
     
      // current time
      ros::Time current_time = ros::Time::now();
     
      //first, we'll publish the transform over tf
      //position and velocity of frame base_link w.r.t. frame odom (fixed frame)
      geometry_msgs::TransformStamped odom_trans;
      odom_trans.header.stamp = current_time;
      odom_trans.header.frame_id = "odom";
      odom_trans.child_frame_id = "base_link";
      odom_trans.transform.translation.x = x;
      odom_trans.transform.translation.y = y;
      odom_trans.transform.translation.z = 0.0;
      odom_trans.transform.rotation = tf::createQuaternionMsgFromYaw(th);
      tfb.sendTransform(odom_trans);
     
      //next, we'll publish the odometry message over ROS
      nav_msgs::Odometry odom;
      odom.header.stamp = current_time;
      odom.header.frame_id = "odom";
      odom.child_frame_id = "base_link";
      odom.pose.pose.position.x = x;
      odom.pose.pose.position.y = y;
      odom.pose.pose.position.z = 0.0;
      odom.pose.pose.orientation = tf::createQuaternionMsgFromYaw(th);
      odom.twist.twist.linear.x = vx;
      odom.twist.twist.linear.y = 0;
      odom.twist.twist.angular.z = vth;
      odom_pub.publish(odom);
    }
     
     
    /// A callback function called by player when a laser packet is received.
    /// Read the packet and create the corresponding ROS message, then publish it.
    void PlayerRosNode::laserReceived() {
      //safety net
      assert(lasProx);
     
      // retrieve laser data
      unsigned nPoints = lasProx->GetCount();
      float resolution = lasProx->GetScanRes();
      float fov = (nPoints-1)*resolution;
     
      // current time
      ros::Time now = ros::Time::now();
     
      // first publish the transform over tf. In our case, the position of the laser
      // is fixed.
      tfb.sendTransform( tf::StampedTransform(
          tf::Transform( tf::createIdentityQuaternion(), //orientation of the laser on the robot
                         tf::Vector3(0.0, 0.0, 0.0) ),   //Position of the laser on the robot
          now, "base_link", "base_laser"));
     
      // then send the laser message
      sensor_msgs::LaserScan laserMsg;
      laserMsg.header.frame_id = "/base_laser";
      laserMsg.header.stamp = now;
      laserMsg.angle_min = -fov/2.0;
      laserMsg.angle_max = +fov/2.0;
      laserMsg.angle_increment = resolution;
      laserMsg.range_min = 0.0;
      laserMsg.range_max = 20; //arbitrary value (can we get the real value from Player?)
      laserMsg.ranges.resize(nPoints);
      laserMsg.intensities.resize(nPoints);
      for(unsigned int i=0;i<nPoints;i++) {
        laserMsg.ranges[i] = lasProx->GetRange(i);
        laserMsg.intensities[i] = lasProx->GetIntensity(i);
      }
      laser_pub.publish(laserMsg);
    }
     
     
    /// A callback function called by ROS when a velocity command message is received.
    /// Read the message and send the command to player.
    void PlayerRosNode::cmdvelReceived(const boost::shared_ptr<geometry_msgs::Twist const>& msg) {
      // safety net
      assert(posProx);
     
      // lock access to posProx
      pthread_mutex_lock( &mutex );
     
      // Pass the velocity command to Player
      posProx->SetSpeed(msg->linear.x, msg->angular.z);
     
      // release access to posProx
      pthread_mutex_unlock( &mutex );
    }
     
     
     
    int main(int argc, char **argv)
    {

          char * Khepera_ip_address = NULL;

      ros::init(argc, argv, "playerros");

    // Backward compatibility with `-ip` command line argument
    argc--; argv++;
    while( argc && *argv[0] == '-' )
    {
        if( !strcmp(*argv, "-ip") && ( argc > 1 ) )
        {
            Khepera_ip_address = *(argv+1);
            printf("Using custom ip address %s\n",Khepera_ip_address);
            argc--; argv++;
        }
        argc--; argv++;
    }
      std::string myIP(Khepera_ip_address, 12);
      PlayerRosNode p(myIP);
      ros::spin();
  
      return 0;
    }

